name: python-deployment
run-name: ${{ github.actor }} - ${{ github.ref_name }}


on:
  push: 
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PYTHON_VERSION: 3.8
  DOCKER_IMAGE_NAME: kube2py


jobs:
  python-ci:
    name: Python CI
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./src

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Setup Python ${{ env.PYTHON_VERSION}}
        with:
          python-version: '${{ env.PYTHON_VERSION}}'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          pip install -r requirements.txt

      - name: Lint
        run: |
          cd ../
          flake8 . --show-source --statistics

      - name: Check Complexity
        run: |
          cd ../
          flake8 . --statistics --max-complexity=10 --exit-zero

      - name: Run unit test with pytest
        run: |
          pytest -v --cov=. --cov-report=json

      - name: Upload Artifacts
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: python-artifact
          path: .



      - name: Upload Helm Artifacts
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: helm-artifacts
          path: ${{ github.workspace }}/helm-charts


  build-image:
    name: Build and Push Image
    needs: ['python-ci']
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-artifact
          path: .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: ./src
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}


  helm-ci:
    runs-on: ubuntu-latest
    needs: ['python-ci']
    if: github.ref_name == 'main'
    name: Helm CI

    steps:

    - uses: actions/download-artifact@v4
      with:
        name: helm-artifacts
        path: .


    - name: Setup Helm
      uses: azure/setup-helm@v4.2.0


    - name: Lint helm
      run: helm lint ./kube2py/

    - name: Template Helm
      run: helm template kube2py ./kube2py/ -f ./kube2py/values.yaml

    - name: Package Helm
      run: helm package ./kube2py

    - name: Upload Helm artifacts
      uses: actions/upload-artifact@v4
      with:
        name: helm-package
        path: ./*.tgz


  deploy-helm:
    name: Deploy Helm
    needs: [build-image, helm-ci]
    runs-on: ubuntu-latest
    environment: development

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: helm-package
        path: .

    - uses: actions/download-artifact@v4
      with:
        name: helm-artifacts
        path: .


    - name: Set Up Helm
      uses: azure/setup-helm@v4.2.0

    - name: Set up Kubectl
      uses: azure/setup-kubectl@v4

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/aks-set-context@v4
      with:
        resource-group: ${{ vars.AZURE_RESOURCE_GROUP }}
        cluster-name: ${{ vars.AZURE_CLUSTER_NAME }}

    - name: Deploy Helm to Development
      run: |
        helm upgrade --install --atomic --wait --timeout 3600s --debug kube2py ./kube2py-*.tgz \
          -f ./kube2py/values.yaml \
          --set mysql.configs.MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}" \
          --set mysql.configs.MYSQL_USER="${{ secrets.MYSQL_USER }}" \
          --set mysql.configs.MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
          --set kube2py.secrets.password="${{ secrets.KUBE2PY_PASSWORD }}" \
          --set kube2py.secrets.login="${{ secrets.KUBE2PY_LOGIN }}" \
          --set kube2py.secrets.DB_CONNECTION="${{ secrets.DB_CONNECTION }}" \
          --set kube2py.image.version="${{ github.sha }}"


